GrammarTools v1.0
2010
Ryerson University
--------------------------

GrammarTools is a suite of tools designed to analyze and parse written English sentences with the goal of determing their grammaticality. It can be used to perform a variety of tasks related to Natural Language Processing including tagging, chunking, parsing, scoring, classification, XML representation, statistical analysis, queries on a grammar, and checking for grammatical correctness.



Building instructions
---------------------
Ant (1.8.0+) is required to be installed and on the path as well as the Java SE (JDK 1.6.0+).
To build the project, run the build script for your operating system (build.sh for Unix users, build.bat for Windows). For information on the dependent libraries the project uses, see the Dependent Libraries section.

For additional build options/help, run "ant -p".
Arguments that can be passed to the build script include:
clean		cleans all files generated by the build
compile	compiles the GrammarTools project
lint		compiles with stricter warnings
dist		creates release/distribution files (default)
run		runs the GrammarTools application
javadoc	generates javadoc documentation for the project.



Usage
------
To start GrammarTools, execute the run script for your operating system (run.sh for Unix users, run.bat for Windows). Although the GrammarTools JAR can be run directly, it is highly recommended to use the run script as it configures the necessary path and environment variables.

GrammarTools features a variety of "tools" (see below) which can be selected from the drop-down list; after which, each tool's options and input sources can be configured and the tool run with output either being displayed in the blue-shaded text area below or to a file, depending on the tool and its options.

For each tool, the "toolkit" option refers to the underlying NLP libraries used for processing the sentence. Currently, the available toolkits are OpenNLP and Stanford (see Dependent Libraries for further information).


Tools
-----

Tag
---
The Tag tool performs part-of-speech tagging on the supplied text. Input text can be supplied in the white-shaded input text area or via a file by selecting the appropriate Input option.
Toolkits - OpenNLP, Stanford
Display probabilities - (OpenNLP only) displays the probability (between 0 and 1) of each tag being correct.
Max. results - (OpenNLP only) the number of taggings to display, with the first tagging being the most likley.
Note: If specifying "Use all toolkits", tagging results will be displayed from both toolkits.

Chunk
-----
The Chunk tool performs chunking at the phrase level on the supplied text. Input text can be supplied via the text area or file.
Toolkits - OpenNLP
Display probabilities - displays the probability (between 0 and 1) of each chunk tag being correct.
Max. results - the number of chunked sentences to display, with the first being the most likley.

Parse
-----
The Parse tool performs full lexical parsing on the supplied text. Input text can be supplied via the text area or file.
Toolkits - OpenNLP, Stanford
Display probabilities - displays the probability (between 0 and 1) of the parse; for the OpenNLP toolkit this is the negative log probability of the parse, for the Stanford toolkit it is the log probability.
Display nested trees - (Stanford only) displays parse trees in nested/hierarchical form.
Max. results - the number of parsed sentences to display, with the first being the most likley.
Note: If specifying "Use all toolkits", tagging results will be displayed from both toolkits.

Score
-----
The Score tool performings scoring on the supplied text and attempts an approximate guess at its grammaticality based on an experimental scoring fuction relating sentence metrics (such as parse probability, lowest tag probability and length) with a relational constant (k-value) and threshold. Input text can be supplied via the text area or file.
Toolkits - OpenNLP, Stanford
Display metrics - displays internal scoring metrics.
k-value - the relational constant to use (to be tweaked to give desired results)
Threshold - the threshold score, below which a sentence is deemed ungrammatical.
Note: k-value and threshold will need to be tweaked to appropriate/desired values, especially since each toolkit generates different parse probabilities. As a result, it is recommended to use the Score tool with one toolkit in mind.

ARFF
----
The ARFF tool performs analysis on a sentence and then records its metrics in Weka's ARFF format (see Dependent Libraries) as training data for later classification in GrammarTools or Weka. Input text can be supplied via the text area or file.
Toolkits - OpenNLP, Stanford
Display metrics - displays internal variables.
Grammatical - whether or not the supplied sentences are grammatical.
k-value - the relational constant to use (to be tweaked to give desired results)
Append - whether the data should be appended to the file or a new file generated.
ARFF file - output file to stoe the sentence data in ARFF format.
Note: it is critical that "Grammatical" be enabled appropriately for proper classification.

XML
----
The XML tool performs analysis on a sentence and exports its metrics and all relevent information to GrammarTools's XML format. For more information on this format see the section GrammarTools XML Format. Input text can be supplied via the text area or file.


GrammarTools XML Format
-------------------------

Grammar Rules
-------------

Models
------

Source Tree
-----------
GrammarTools
|
+ corpora
|-
+ lib
+ misc
+ models
|- opennlp
|- stanford

Dependent Libraries
--------------------
OpenNLP
Stanford NLP
Weka

Contact
-------

GrammarTools is the product of research work done at Ryerson University by Anthony Penniston under the supervision and direction of Dr. Eric Harley.

Anthony Penniston
anthony.penniston@gmail.com
http://anthonypenniston.com/GrammarTools

Eric Harley 
eharley@scs.ryerson.ca
http://scs.ryerson.ca
