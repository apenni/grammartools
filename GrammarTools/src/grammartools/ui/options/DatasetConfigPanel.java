package grammartools.ui.options;

import grammartools.GrammarTools.DatasetOptions;
import grammartools.ui.SwingUtils;
import grammartools.util.SentenceInstance;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.ListModel;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;

@SuppressWarnings("serial")
public class DatasetConfigPanel extends javax.swing.JPanel implements ConfigPanel
{
    public DatasetConfigPanel()
    {
        initComponents();
        
        arffRadioButton.doClick();
        updateGrammaticalClassTypeLayout();
        
        try
        {
            functionSyntaxTextArea.setText(grammartools.GrammarTools.getDefaultFunctionScript());
        }
        catch(NoSuchFieldException e)
        {
            functionSyntaxTextArea.setText("/*\nInitialization Error:\n" + e.getLocalizedMessage() + "*/");
        }
        
        editFunctionDialog.pack();
        functionSyntaxTextArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT);
        functionSyntaxTextArea.setCodeFoldingEnabled(true);
        functionSyntaxTextArea.setAntiAliasingEnabled(true);
    }
    
    @Override
    public DatasetOptions getConfig()
    {
        DatasetOptions o = new DatasetOptions();
        o.functionScript = functionSyntaxTextArea.getText();
        o.outputFile = outputFileTextField.getText();
        o.outputFormat = arffRadioButton.isSelected() ? DatasetOptions.OutputFormat.ARFF : DatasetOptions.OutputFormat.CSV;
        o.isAppending = appendFileCheckBox.isSelected();
                
        o.useBinaryAttrib = binaryGrammaticalRadioButton.isSelected() || binaryDataCheckBox.isSelected();
        o.useNumericAttrib = numericGrammaticalRadioButton.isSelected();
        
        // if numeric, use number of errors per sentence
        if(o.useNumericAttrib)
            o.nGrammaticalErrorsPerSentence = (Double)nGrammaticalErrorsPerSentenceSpinner.getValue();
        // otherwise just indicate 0 or >0 if binary
        else
            o.nGrammaticalErrorsPerSentence = correctRadioButton.isSelected() ? 0 : 1;

        o.grammarFile = inputGrammarFileTextField.getText();
        
        return o;
    }
    
    @Override
    public String getConfigErrors()
    {
        String errors = "";
        
        DatasetOptions o = getConfig();
        if(o.outputFile.isEmpty()) errors += "output file must be specified";
        if(!o.grammarFile.isEmpty() && !new File(o.grammarFile).isFile()) errors += "prolog grammar file does not exist\n";
        
        return errors.isEmpty() ? null : errors;
    }
    
    private void updateGrammaticalClassTypeLayout()
    {
        grammaticalClassTypePanel.removeAll();
        grammaticalClassTypePanel.add(
            binaryGrammaticalRadioButton.isSelected() ? 
                binaryPanel : numericPanel);
        grammaticalClassTypePanel.revalidate();
    }
    
    private ListModel getVariablesListModel()
    {
        DefaultListModel model = new DefaultListModel();
        for(String v : SentenceInstance.getAttributeNames())
            model.addElement(v);       
        return model;
    }
    
    private void updateGrammaticalityLabel()
    {
        grammaticalityImageLabel.setIcon(
                correctRadioButton.isSelected() 
                ? correctIcon : incorrectIcon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        binaryGrammaticalButtonGroup = new javax.swing.ButtonGroup();
        grammaticalClassTypeButtonGroup = new javax.swing.ButtonGroup();
        binaryPanel = new javax.swing.JPanel();
        grammaticalityImageLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        correctRadioButton = new javax.swing.JRadioButton();
        incorrectRadioButton = new javax.swing.JRadioButton();
        numericPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        nGrammaticalErrorsPerSentenceSpinner = new javax.swing.JSpinner();
        binaryDataCheckBox = new javax.swing.JCheckBox();
        outputFormatButtonGroup = new javax.swing.ButtonGroup();
        editFunctionDialog = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        codeSplitPane = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        functionSyntaxTextArea = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        variablesList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        editFunctionButton = new javax.swing.JButton();
        browseForOutput = new javax.swing.JButton();
        outputFileTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        appendFileCheckBox = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        binaryGrammaticalRadioButton = new javax.swing.JRadioButton();
        numericGrammaticalRadioButton = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        grammaticalClassTypePanel = new javax.swing.JPanel();
        arffRadioButton = new javax.swing.JRadioButton();
        csvRadioButton = new javax.swing.JRadioButton();
        browseForGrammarInputFile = new javax.swing.JButton();
        inputGrammarFileTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        launchWekaButton = new javax.swing.JButton();

        grammaticalityImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        grammaticalityImageLabel.setIcon(correctIcon);
        grammaticalityImageLabel.setAlignmentX(0.5F);
        grammaticalityImageLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel3.setLabelFor(correctRadioButton);
        jLabel3.setText("Input is grammatically...");

        binaryGrammaticalButtonGroup.add(correctRadioButton);
        correctRadioButton.setMnemonic('c');
        correctRadioButton.setSelected(true);
        correctRadioButton.setText("Correct");
        correctRadioButton.setToolTipText("The input sentences are grammatically correct");
        correctRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                correctRadioButtonActionPerformed(evt);
            }
        });

        binaryGrammaticalButtonGroup.add(incorrectRadioButton);
        incorrectRadioButton.setMnemonic('i');
        incorrectRadioButton.setText("Incorrect");
        incorrectRadioButton.setToolTipText("The input sentences are grammatically incorrect");
        incorrectRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                incorrectRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout binaryPanelLayout = new javax.swing.GroupLayout(binaryPanel);
        binaryPanel.setLayout(binaryPanelLayout);
        binaryPanelLayout.setHorizontalGroup(
            binaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(binaryPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(binaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addGroup(binaryPanelLayout.createSequentialGroup()
                        .addGroup(binaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(correctRadioButton)
                            .addComponent(incorrectRadioButton))
                        .addGap(18, 18, 18)
                        .addComponent(grammaticalityImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        binaryPanelLayout.setVerticalGroup(
            binaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(binaryPanelLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(binaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(binaryPanelLayout.createSequentialGroup()
                        .addComponent(correctRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(incorrectRadioButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, binaryPanelLayout.createSequentialGroup()
                        .addComponent(grammaticalityImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        numericPanel.setName("numericPanel"); // NOI18N

        jLabel5.setLabelFor(nGrammaticalErrorsPerSentenceSpinner);
        jLabel5.setText("errors per sentence");

        nGrammaticalErrorsPerSentenceSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        nGrammaticalErrorsPerSentenceSpinner.setToolTipText("Enter number of errors present in each sentence.");

        binaryDataCheckBox.setText("Also generate binary data");
        binaryDataCheckBox.setToolTipText("generate binary attribute in addition to numeric");

        javax.swing.GroupLayout numericPanelLayout = new javax.swing.GroupLayout(numericPanel);
        numericPanel.setLayout(numericPanelLayout);
        numericPanelLayout.setHorizontalGroup(
            numericPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(numericPanelLayout.createSequentialGroup()
                .addGroup(numericPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, numericPanelLayout.createSequentialGroup()
                        .addComponent(nGrammaticalErrorsPerSentenceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(10, 10, 10))
                    .addComponent(binaryDataCheckBox, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        numericPanelLayout.setVerticalGroup(
            numericPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(numericPanelLayout.createSequentialGroup()
                .addGroup(numericPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(nGrammaticalErrorsPerSentenceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(binaryDataCheckBox)
                .addContainerGap())
        );

        editFunctionDialog.setTitle("Edit Function");
        editFunctionDialog.setName("editFunctionDialog"); // NOI18N

        jLabel2.setDisplayedMnemonic('f');
        jLabel2.setText("Enter javascript code:");

        codeSplitPane.setDividerSize(6);
        codeSplitPane.setResizeWeight(0.9);
        codeSplitPane.setOneTouchExpandable(true);

        functionSyntaxTextArea.setColumns(20);
        functionSyntaxTextArea.setRows(5);
        jScrollPane1.setViewportView(functionSyntaxTextArea);

        codeSplitPane.setLeftComponent(jScrollPane1);

        variablesList.setModel(getVariablesListModel());
        variablesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        variablesList.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                variablesListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(variablesList);

        codeSplitPane.setRightComponent(jScrollPane2);

        jLabel1.setText("Variables:");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16/document-open.png"))); // NOI18N
        openButton.setMnemonic('o');
        openButton.setToolTipText("Open script file");
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(openButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16/document-save.png"))); // NOI18N
        saveButton.setMnemonic('s');
        saveButton.setToolTipText("Save script file");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveButton);

        javax.swing.GroupLayout editFunctionDialogLayout = new javax.swing.GroupLayout(editFunctionDialog.getContentPane());
        editFunctionDialog.getContentPane().setLayout(editFunctionDialogLayout);
        editFunctionDialogLayout.setHorizontalGroup(
            editFunctionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(codeSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
            .addGroup(editFunctionDialogLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );
        editFunctionDialogLayout.setVerticalGroup(
            editFunctionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editFunctionDialogLayout.createSequentialGroup()
                .addGroup(editFunctionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(editFunctionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1))
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(codeSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE))
        );

        editFunctionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit-function.png"))); // NOI18N
        editFunctionButton.setMnemonic('e');
        editFunctionButton.setText("Edit function");
        editFunctionButton.setToolTipText("Create/modify a function over sentence features");
        editFunctionButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                editFunctionButtonActionPerformed(evt);
            }
        });

        browseForOutput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16/document-open.png"))); // NOI18N
        browseForOutput.setToolTipText("Browse");
        browseForOutput.setMargin(new java.awt.Insets(0, 0, 0, 0));
        browseForOutput.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                browseForOutputActionPerformed(evt);
            }
        });

        outputFileTextField.setFont(outputFileTextField.getFont());
        outputFileTextField.setText(DEF_OUTPUT_DATASET_FILE);
        outputFileTextField.setToolTipText("The location of the dataset output file");

        jLabel4.setDisplayedMnemonic('o');
        jLabel4.setLabelFor(outputFileTextField);
        jLabel4.setText("Output file:");

        appendFileCheckBox.setMnemonic('a');
        appendFileCheckBox.setText("Append to file");
        appendFileCheckBox.setToolTipText("Append data to a pre-existing file?");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        grammaticalClassTypeButtonGroup.add(binaryGrammaticalRadioButton);
        binaryGrammaticalRadioButton.setMnemonic('b');
        binaryGrammaticalRadioButton.setSelected(true);
        binaryGrammaticalRadioButton.setText("Binary");
        binaryGrammaticalRadioButton.setToolTipText("Use binary nominal classes: grammatically correct or incorrect");
        binaryGrammaticalRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                binaryGrammaticalRadioButtonActionPerformed(evt);
            }
        });

        grammaticalClassTypeButtonGroup.add(numericGrammaticalRadioButton);
        numericGrammaticalRadioButton.setMnemonic('n');
        numericGrammaticalRadioButton.setText("Numeric ");
        numericGrammaticalRadioButton.setToolTipText("Use numeric class: number of grammatical errors present");
        numericGrammaticalRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                numericGrammaticalRadioButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Grammatical class type:");

        grammaticalClassTypePanel.setLayout(new javax.swing.BoxLayout(grammaticalClassTypePanel, javax.swing.BoxLayout.LINE_AXIS));

        outputFormatButtonGroup.add(arffRadioButton);
        arffRadioButton.setFont(arffRadioButton.getFont());
        arffRadioButton.setMnemonic('r');
        arffRadioButton.setSelected(true);
        arffRadioButton.setText("ARFF");
        arffRadioButton.setToolTipText("output datset in Weka ARFF");
        arffRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                arffRadioButtonActionPerformed(evt);
            }
        });

        outputFormatButtonGroup.add(csvRadioButton);
        csvRadioButton.setMnemonic('c');
        csvRadioButton.setText("CSV");
        csvRadioButton.setToolTipText("output dataset in comma-separated values format");
        csvRadioButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                csvRadioButtonActionPerformed(evt);
            }
        });

        browseForGrammarInputFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16/document-open.png"))); // NOI18N
        browseForGrammarInputFile.setToolTipText("Browse");
        browseForGrammarInputFile.setMargin(new java.awt.Insets(0, 0, 0, 0));
        browseForGrammarInputFile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                browseForGrammarInputFileActionPerformed(evt);
            }
        });

        inputGrammarFileTextField.setFont(inputGrammarFileTextField.getFont());
        inputGrammarFileTextField.setText(DEF_INPUT_GRAMMAR_FILE);
        inputGrammarFileTextField.setToolTipText("The location of the prolog file containing DCG rules");

        jLabel7.setDisplayedMnemonic('o');
        jLabel7.setLabelFor(inputGrammarFileTextField);
        jLabel7.setText("Prolog grammar file:");

        launchWekaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16/weka.png"))); // NOI18N
        launchWekaButton.setToolTipText("Launch Weka");
        launchWekaButton.setPreferredSize(new java.awt.Dimension(25, 25));
        launchWekaButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                launchWekaButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(binaryGrammaticalRadioButton)
                    .addComponent(numericGrammaticalRadioButton)
                    .addComponent(jLabel6)
                    .addComponent(grammaticalClassTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editFunctionButton)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(browseForGrammarInputFile)
                                .addGap(0, 0, 0)
                                .addComponent(inputGrammarFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(browseForOutput)
                        .addGap(0, 0, 0)
                        .addComponent(outputFileTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(arffRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(csvRadioButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(appendFileCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(launchWekaButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(binaryGrammaticalRadioButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(numericGrammaticalRadioButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(grammaticalClassTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editFunctionButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(browseForGrammarInputFile, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(inputGrammarFileTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(arffRadioButton)
                                    .addComponent(csvRadioButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(browseForOutput, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(outputFileTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(appendFileCheckBox))
                            .addComponent(launchWekaButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editFunctionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editFunctionButtonActionPerformed
    {//GEN-HEADEREND:event_editFunctionButtonActionPerformed
        editFunctionDialog.setVisible(true);
    }//GEN-LAST:event_editFunctionButtonActionPerformed

    private void browseForOutputActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_browseForOutputActionPerformed
    {//GEN-HEADEREND:event_browseForOutputActionPerformed
        javax.swing.filechooser.FileNameExtensionFilter filter = 
            arffRadioButton.isSelected() ?
            new javax.swing.filechooser.FileNameExtensionFilter("ARFF Files", "arff") :
            new javax.swing.filechooser.FileNameExtensionFilter("CSV Files", "csv");
        
        String input = outputFileTextField.getText();
        String file = SwingUtils.browseForFile(
            (java.awt.Window)this.getTopLevelAncestor(),
            (input.isEmpty() ? DEF_OUTPUT_DATASET_FILE : input), JFileChooser.FILES_ONLY,
            "Select an output dataset file",
            filter);

        if(file != null && !new File(file).equals(new File(outputFileTextField.getText())))
        {
            outputFileTextField.setText(file);
            outputFileTextField.updateUI();
        }
    }//GEN-LAST:event_browseForOutputActionPerformed

    private void incorrectRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_incorrectRadioButtonActionPerformed
    {//GEN-HEADEREND:event_incorrectRadioButtonActionPerformed
        updateGrammaticalityLabel();
    }//GEN-LAST:event_incorrectRadioButtonActionPerformed

    private void correctRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_correctRadioButtonActionPerformed
    {//GEN-HEADEREND:event_correctRadioButtonActionPerformed
        updateGrammaticalityLabel();
    }//GEN-LAST:event_correctRadioButtonActionPerformed

    private void binaryGrammaticalRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_binaryGrammaticalRadioButtonActionPerformed
    {//GEN-HEADEREND:event_binaryGrammaticalRadioButtonActionPerformed
        updateGrammaticalClassTypeLayout();
    }//GEN-LAST:event_binaryGrammaticalRadioButtonActionPerformed

    private void numericGrammaticalRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_numericGrammaticalRadioButtonActionPerformed
    {//GEN-HEADEREND:event_numericGrammaticalRadioButtonActionPerformed
        updateGrammaticalClassTypeLayout();
    }//GEN-LAST:event_numericGrammaticalRadioButtonActionPerformed

    private void variablesListMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_variablesListMouseClicked
    {//GEN-HEADEREND:event_variablesListMouseClicked
        if(evt.getClickCount() == 2 && variablesList.getSelectedValue() != null)
        {
            functionSyntaxTextArea.insert(
                variablesList.getSelectedValue().toString(),
                functionSyntaxTextArea.getCaretPosition());
        }
    }//GEN-LAST:event_variablesListMouseClicked

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_openButtonActionPerformed
    {//GEN-HEADEREND:event_openButtonActionPerformed
        javax.swing.filechooser.FileNameExtensionFilter filter = 
            new javax.swing.filechooser.FileNameExtensionFilter("JavaScript Files [.js]", "js");
        
        String file = SwingUtils.browseForFile(
            editFunctionDialog, (inputFile == null ? DEF_INPUT_FUNCTION_FILE : inputFile), JFileChooser.FILES_ONLY,
            "Open a script file",
            filter);

        if(file != null)
        {
            try
            {
                final BufferedReader in = new BufferedReader(new FileReader(file));
                final StringBuilder sb = new StringBuilder();
                String line;
                while((line = in.readLine()) != null)                  
                    sb.append(line + "\n");
                in.close();
                functionSyntaxTextArea.setText(sb.toString());
                inputFile = file;
            }
            catch(IOException e) 
            {
                SwingUtils.showWarning(editFunctionDialog, "Could not open file." , "Warning");
            }
        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
    {//GEN-HEADEREND:event_saveButtonActionPerformed
        javax.swing.filechooser.FileNameExtensionFilter filter = 
            new javax.swing.filechooser.FileNameExtensionFilter("JavaScript Files [.js]", "js");
        
        String file = SwingUtils.browseForFile(
            editFunctionDialog, (inputFile == null ? DEF_INPUT_FUNCTION_FILE : inputFile), JFileChooser.FILES_ONLY,
            "Save to script file",
            filter);

        if(file != null)
        {
            String s = functionSyntaxTextArea.getText();
            try
            {
                BufferedWriter out = new BufferedWriter(new FileWriter(file, false));
                out.write(s);
                out.close();
                inputFile = file;
            }
            catch(IOException e) 
            {
                SwingUtils.showWarning(editFunctionDialog, "Could not write file." , "Warning");
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void browseForGrammarInputFileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_browseForGrammarInputFileActionPerformed
    {//GEN-HEADEREND:event_browseForGrammarInputFileActionPerformed
        javax.swing.filechooser.FileNameExtensionFilter filter =
        new javax.swing.filechooser.FileNameExtensionFilter("Prolog Files [.pl]", "pl");

        String input = inputGrammarFileTextField.getText();
        String file = SwingUtils.browseForFile(
            (java.awt.Window)this.getTopLevelAncestor(),
            (input.isEmpty() ? DEF_INPUT_GRAMMAR_FILE : input), JFileChooser.FILES_ONLY,
            "Select an input file",
            filter);

        if(file != null)
        {
            if(new File(file).isFile())
            {
                inputGrammarFileTextField.setText(file);
            }
            else
            {
                SwingUtils.showWarning((java.awt.Window)this.getTopLevelAncestor(),
                    "File does not exist." , "Warning");
            }
        }
    }//GEN-LAST:event_browseForGrammarInputFileActionPerformed

    private void csvRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_csvRadioButtonActionPerformed
    {//GEN-HEADEREND:event_csvRadioButtonActionPerformed
        if(csvRadioButton.isSelected())
        {
            outputFileTextField.setText(outputFileTextField.getText().replaceFirst("\\..*$", ".csv"));
        }
    }//GEN-LAST:event_csvRadioButtonActionPerformed

    private void arffRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_arffRadioButtonActionPerformed
    {//GEN-HEADEREND:event_arffRadioButtonActionPerformed
        if(arffRadioButton.isSelected())
        {
            outputFileTextField.setText(outputFileTextField.getText().replaceFirst("\\..*$", ".arff"));
        }
    }//GEN-LAST:event_arffRadioButtonActionPerformed

    private void launchWekaButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_launchWekaButtonActionPerformed
    {//GEN-HEADEREND:event_launchWekaButtonActionPerformed
        try
        {
            new ProcessBuilder("java", "-jar", 
                    "lib" + System.getProperty("file.separator") + "weka.jar",
                    /*"-Xmx#maxheap#", "-c", "explorer",*/ 
                    outputFileTextField.getText()).start();
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
            SwingUtils.showWarning((java.awt.Window)this.getTopLevelAncestor(),
                                   "Could not start the Weka process.", "Error");
        }
    }//GEN-LAST:event_launchWekaButtonActionPerformed
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox appendFileCheckBox;
    private javax.swing.JRadioButton arffRadioButton;
    private javax.swing.JCheckBox binaryDataCheckBox;
    private javax.swing.ButtonGroup binaryGrammaticalButtonGroup;
    private javax.swing.JRadioButton binaryGrammaticalRadioButton;
    private javax.swing.JPanel binaryPanel;
    private javax.swing.JButton browseForGrammarInputFile;
    private javax.swing.JButton browseForOutput;
    private javax.swing.JSplitPane codeSplitPane;
    private javax.swing.JRadioButton correctRadioButton;
    private javax.swing.JRadioButton csvRadioButton;
    private javax.swing.JButton editFunctionButton;
    private javax.swing.JDialog editFunctionDialog;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea functionSyntaxTextArea;
    private javax.swing.ButtonGroup grammaticalClassTypeButtonGroup;
    private javax.swing.JPanel grammaticalClassTypePanel;
    private javax.swing.JLabel grammaticalityImageLabel;
    private javax.swing.JRadioButton incorrectRadioButton;
    private javax.swing.JTextField inputGrammarFileTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton launchWekaButton;
    private javax.swing.JSpinner nGrammaticalErrorsPerSentenceSpinner;
    private javax.swing.JRadioButton numericGrammaticalRadioButton;
    private javax.swing.JPanel numericPanel;
    private javax.swing.JButton openButton;
    private javax.swing.JTextField outputFileTextField;
    private javax.swing.ButtonGroup outputFormatButtonGroup;
    private javax.swing.JButton saveButton;
    private javax.swing.JList variablesList;
    // End of variables declaration//GEN-END:variables

    private String inputFile = null;
    private static final String DEF_INPUT_FUNCTION_FILE = "function.js";
    private final javax.swing.ImageIcon correctIcon = new javax.swing.ImageIcon(getClass().getResource("/img/correct.png"));
    private final javax.swing.ImageIcon incorrectIcon = new javax.swing.ImageIcon(getClass().getResource("/img/incorrect.png"));
    private static final String DEF_INPUT_GRAMMAR_FILE = "grammar.pl";
    private static final String DEF_OUTPUT_DATASET_FILE = "sentences.arff";
}
