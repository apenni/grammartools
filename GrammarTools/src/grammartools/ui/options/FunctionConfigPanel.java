package grammartools.ui.options;

import grammartools.GrammarTools.FunctionOptions;
import grammartools.ui.SwingUtils;
import grammartools.util.SentenceInstance;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.ListModel;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;

@SuppressWarnings("serial")
public class FunctionConfigPanel extends javax.swing.JPanel implements ConfigPanel
{
    public FunctionConfigPanel()
    {
        initComponents();
        
        try
        {
            functionSyntaxTextArea.setText(grammartools.GrammarTools.getDefaultFunctionScript());
        }
        catch(NoSuchFieldException e)
        {
            functionSyntaxTextArea.setText("/*\nInitialization Error:\n" + e.getLocalizedMessage() + "*/");
        }
        
        editFunctionDialog.pack();
        functionSyntaxTextArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT);
        functionSyntaxTextArea.setCodeFoldingEnabled(true);
        functionSyntaxTextArea.setAntiAliasingEnabled(true);
    }
    
    @Override
    public FunctionOptions getConfig()
    {
        FunctionOptions o = new FunctionOptions();
        o.functionScript = functionSyntaxTextArea.getText();
        o.grammarFile = inputGrammarFileTextField.getText();
        return o;
    }
    
    @Override
    public String getConfigErrors()
    {
        String errors = "";

        FunctionOptions o = getConfig();
        if(o.functionScript.isEmpty()) errors += "a valid function must be specified\n";
        if(!o.grammarFile.isEmpty() && !new File(o.grammarFile).isFile()) errors += "prolog grammar file does not exist\n";

        return errors.isEmpty() ? null : errors;
    }
    
    private ListModel getVariablesListModel()
    {
        DefaultListModel model = new DefaultListModel();
        for(String v : SentenceInstance.getAttributeNames())
            model.addElement(v);       
        return model;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        editFunctionDialog = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        codeSplitPane = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        functionSyntaxTextArea = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        variablesList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        editFunctionButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        browseForInput2 = new javax.swing.JButton();
        inputGrammarFileTextField = new javax.swing.JTextField();

        editFunctionDialog.setTitle("Edit Function");
        editFunctionDialog.setName("editFunctionDialog"); // NOI18N

        jLabel2.setDisplayedMnemonic('f');
        jLabel2.setLabelFor(functionSyntaxTextArea);
        jLabel2.setText("Enter javascript code:");

        codeSplitPane.setDividerSize(6);
        codeSplitPane.setResizeWeight(0.9);
        codeSplitPane.setOneTouchExpandable(true);

        functionSyntaxTextArea.setColumns(20);
        functionSyntaxTextArea.setRows(5);
        jScrollPane1.setViewportView(functionSyntaxTextArea);

        codeSplitPane.setLeftComponent(jScrollPane1);

        variablesList.setModel(getVariablesListModel());
        variablesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        variablesList.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                variablesListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(variablesList);

        codeSplitPane.setRightComponent(jScrollPane2);

        jLabel1.setLabelFor(variablesList);
        jLabel1.setText("Variables:");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16/document-open.png"))); // NOI18N
        openButton.setMnemonic('o');
        openButton.setToolTipText("Open script file");
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(openButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16/document-save.png"))); // NOI18N
        saveButton.setMnemonic('s');
        saveButton.setToolTipText("Save script file");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveButton);

        javax.swing.GroupLayout editFunctionDialogLayout = new javax.swing.GroupLayout(editFunctionDialog.getContentPane());
        editFunctionDialog.getContentPane().setLayout(editFunctionDialogLayout);
        editFunctionDialogLayout.setHorizontalGroup(
            editFunctionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(codeSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
            .addGroup(editFunctionDialogLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );
        editFunctionDialogLayout.setVerticalGroup(
            editFunctionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editFunctionDialogLayout.createSequentialGroup()
                .addGroup(editFunctionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(editFunctionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1))
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(codeSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE))
        );

        editFunctionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit-function.png"))); // NOI18N
        editFunctionButton.setText("Edit function");
        editFunctionButton.setToolTipText("Create/modify a function over sentence features");
        editFunctionButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                editFunctionButtonActionPerformed(evt);
            }
        });

        jLabel4.setDisplayedMnemonic('o');
        jLabel4.setLabelFor(inputGrammarFileTextField);
        jLabel4.setText("Prolog grammar file:");

        browseForInput2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16/document-open.png"))); // NOI18N
        browseForInput2.setToolTipText("Browse");
        browseForInput2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        browseForInput2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                browseForInput2ActionPerformed(evt);
            }
        });

        inputGrammarFileTextField.setFont(inputGrammarFileTextField.getFont());
        inputGrammarFileTextField.setText(DEF_INPUT_GRAMMAR_FILE);
        inputGrammarFileTextField.setToolTipText("The location of the prolog file containing DCG rules");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editFunctionButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(browseForInput2)
                        .addGap(0, 0, 0)
                        .addComponent(inputGrammarFileTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(browseForInput2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(inputGrammarFileTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(editFunctionButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void editFunctionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editFunctionButtonActionPerformed
    {//GEN-HEADEREND:event_editFunctionButtonActionPerformed
        editFunctionDialog.setVisible(true);
    }//GEN-LAST:event_editFunctionButtonActionPerformed

    private void variablesListMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_variablesListMouseClicked
    {//GEN-HEADEREND:event_variablesListMouseClicked
        if(evt.getClickCount() == 2 && variablesList.getSelectedValue() != null)
        {
            functionSyntaxTextArea.insert(
                    variablesList.getSelectedValue().toString(),
                    functionSyntaxTextArea.getCaretPosition());
        }
    }//GEN-LAST:event_variablesListMouseClicked

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_openButtonActionPerformed
    {//GEN-HEADEREND:event_openButtonActionPerformed
        javax.swing.filechooser.FileNameExtensionFilter filter = 
            new javax.swing.filechooser.FileNameExtensionFilter("JavaScript Files [.js]", "js");
        
        String file = SwingUtils.browseForFile(
            editFunctionDialog, (inputFile == null ? DEF_INPUT_FILE : inputFile), JFileChooser.FILES_ONLY,
            "Open a script file",
            filter);

        if(file != null)
        {
            try
            {
                final BufferedReader in = new BufferedReader(new FileReader(file));
                final StringBuilder sb = new StringBuilder();
                String line;
                while((line = in.readLine()) != null)                  
                    sb.append(line + "\n");
                in.close();
                functionSyntaxTextArea.setText(sb.toString());
                inputFile = file;
            }
            catch(IOException e) 
            {
                SwingUtils.showWarning(editFunctionDialog, "Could not open file." , "Warning");
            }
        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveButtonActionPerformed
    {//GEN-HEADEREND:event_saveButtonActionPerformed
        javax.swing.filechooser.FileNameExtensionFilter filter = 
            new javax.swing.filechooser.FileNameExtensionFilter("JavaScript Files [.js]", "js");
        
        String file = SwingUtils.browseForFile(
            editFunctionDialog, (inputFile == null ? DEF_INPUT_FILE : inputFile), JFileChooser.FILES_ONLY,
            "Save to script file",
            filter);

        if(file != null)
        {
            String s = functionSyntaxTextArea.getText();
            try
            {
                BufferedWriter out = new BufferedWriter(new FileWriter(file, false));
                out.write(s);
                out.close();
                inputFile = file;
            }
            catch(IOException e) 
            {
                SwingUtils.showWarning(editFunctionDialog, "Could not write file." , "Warning");
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void browseForInput2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_browseForInput2ActionPerformed
    {//GEN-HEADEREND:event_browseForInput2ActionPerformed
        javax.swing.filechooser.FileNameExtensionFilter filter =
        new javax.swing.filechooser.FileNameExtensionFilter("Prolog Files [.pl]", "pl");

        String input = inputGrammarFileTextField.getText();
        String file = SwingUtils.browseForFile(
            (java.awt.Window)this.getTopLevelAncestor(),
            (input.isEmpty() ? DEF_INPUT_GRAMMAR_FILE : input), JFileChooser.FILES_ONLY,
            "Select an input file",
            filter);

        if(file != null)
        {
            if(new File(file).isFile())
            {
                inputGrammarFileTextField.setText(file);
            }
            else
            {
                SwingUtils.showWarning((java.awt.Window)this.getTopLevelAncestor(),
                    "File does not exist." , "Warning");
            }
        }
    }//GEN-LAST:event_browseForInput2ActionPerformed
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseForInput2;
    private javax.swing.JSplitPane codeSplitPane;
    private javax.swing.JButton editFunctionButton;
    private javax.swing.JDialog editFunctionDialog;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea functionSyntaxTextArea;
    private javax.swing.JTextField inputGrammarFileTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton openButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JList variablesList;
    // End of variables declaration//GEN-END:variables
    
    private String inputFile = null;
    private static final String DEF_INPUT_FILE = "function.js";
    private static final String DEF_INPUT_GRAMMAR_FILE = "grammar.pl";
}
